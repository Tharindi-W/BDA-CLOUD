name: MediTrack CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          echo "Installing necessary dependencies..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https curl conntrack socat
          echo "Dependencies installed."

      # Step 3: Install Minikube
      - name: Install Minikube
        run: |
          echo "Installing Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          echo "Minikube installed."

      # Step 4: Start Minikube
      - name: Start Minikube
        run: |
          echo "Starting Minikube with Docker driver..."
          minikube start --driver=docker
          minikube addons enable ingress
          echo "Minikube started and ingress enabled."

      # Step 5: Build Docker Images
      - name: Build Docker Images
        run: |
          eval $(minikube docker-env)
          declare -A services=( 
            ["PatientRecordService"]="patient-record-service"
            ["AnalyticsService"]="analytics-service"
            ["AppointmentSchedulingService"]="appointment-scheduling-service"
            ["NotificationService"]="notification-service"
            ["RedshiftAnalyticsService"]="redshift-analytics-service"
          )
          for service in "${!services[@]}"; do
            echo "Building Docker image for $service..."
            docker build -t "${services[$service]}:latest" -f "$service/docker/Dockerfile" "$service"
          done
          echo "Docker images built successfully."

      # Step 6: Deploy to Kubernetes
      - name: Deploy Kubernetes Resources
        run: |
          declare -A services=( 
            ["PatientRecordService"]="patient-record-service"
            ["AnalyticsService"]="analytics-service"
            ["AppointmentSchedulingService"]="appointment-scheduling-service"
            ["NotificationService"]="notification-service"
            ["RedshiftAnalyticsService"]="redshift-analytics-service"
          )
          for service in "${!services[@]}"; do
            echo "Applying Kubernetes manifests for $service..."
            kubectl apply -f "./$service/manifests/"
          done
          echo "Applying ingress..."
          kubectl apply -f ./ingress.yaml
          echo "Deployment completed."

      # Step 7: Force Trigger Redshift CronJob
      # You can remove this part if not needed
      - name: Trigger Redshift CronJob
        run: |
          echo "Forcing the Redshift CronJob to run immediately..."
          kubectl create job --from=cronjob/redshift-analytics-cronjob redshift-analytics-manual
          kubectl get jobs
          echo "Redshift CronJob triggered."


      # Step 8: Wait for Pods to be Ready
      # You can remove this part if not needed
      - name: Wait for Pods to Be Ready
        run: |
          echo "Waiting for pods to be ready..."
          sleep 180  # Wait for 3 minutes
          kubectl get pods
          ## kubectl wait --for=condition=ready pod --all --timeout=300s
          echo "All pods are ready."

      # Step 9: Verify Job Status
      # You can remove this part if not needed
      - name: Verify Jobs
        run: |
          echo "Checking jobs status..."
          kubectl get jobs
          echo "Jobs status verified."

      # Step 10: Run Tests
      # You can remove this part if not needed
      - name: Run Tests
        run: |
          echo "Running tests..."
          python Test.py
          echo "Tests executed successfully."

      # Step 11: Commit Changes
      # You can remove this part if not needed
      - name: Commit Changes to Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Committing changes to Git..."
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Automated CI/CD pipeline updates."
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Changes committed to Git."
